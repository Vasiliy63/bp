// rem, em
@function em($pxval, $fs: null, $base: $browser-fs){
	@if ( $fs ) {
		$fs: $fs / ($fs * 0 + 1); // strip units
		@return ($pxval / ($base * $fs)) * 1em;
	}
	@else {
		@return ($pxval / $base) * 1em;
	}
}
@function rem($pxval, $base: $browser-fs){
	@return ($pxval / $base) * 1rem;
}
//rem fallback, exmp [ @include rem(font-size 20px, width 100px) ]
@mixin rem($properties...){
	@each $prop, $val in $properties {
		#{$prop}: $val;
		#{$prop}: rem($val);
	}
}

// retina
@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (   min--moz-device-pixel-ratio: 2),
		only screen and (     -o-min-device-pixel-ratio: 2/1),
		only screen and (        min-device-pixel-ratio: 2),
		only screen and (                min-resolution: 192dpi),
		only screen and (                min-resolution: 2dppx)
		{@content}
}

// PLACEHOLDER COLOR
@mixin pl {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// HOVER
@mixin hover { &:hover, &:active { @content } }
@mixin focus { &:focus { @content } }

// SMOOTH
@mixin smooth($int: .3s, $prop: all) { transition: $prop $int; }

// webp
@mixin webp($path) {
	.no-js &, .no-webp & {
		background-image: url($path);
	}
	.webp & {
		$pathLength: str-length($path) - 4;
		$path: str-slice($path, 1, $pathLength);
		background-image: url($path + '.webp');
	}
}
