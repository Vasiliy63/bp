// strip units
@function strip_unit ($number) {
	@if unitless($number) {
		@return $number;
	}
	@else {
		@return $number / ($number * 0 + 1);
	}
}


// em
@function em($pxval, $fs: null, $ie: false, $base: $browser-fs){
	$emval: 0;
	$pxval: strip_unit($pxval);
	$base: strip_unit($base);

	@if $fs and unit($fs) == 'em' {
		$fs: strip_unit($fs);
		$emval: ($pxval / ($base * $fs)) * 1em;
		@if $ie { @return calc((#{$pxval} / (#{$base * $fs})) * 1em); } // ie calc trick
	}

    @else if $fs and unit($fs) == 'px' {
		$fs: strip_unit($fs);
		$emval: ($pxval / $fs) * 1em;
		@if $ie { @return calc((#{$pxval} / #{$fs}) * 1em); } // ie calc trick
    }

	@else {
		$emval: ($pxval / $base) * 1em;
		@if $ie { @return calc((#{$pxval} / #{$base}) * 1em); } // ie calc trick
	}

	@return $emval;
}

// rem
@function rem($pxval, $ie: false, $base: $browser-fs){
	$pxval: strip_unit($pxval);
	$base: strip_unit($base);

	$remval: ($pxval / $base) * 1rem;
	@if $ie { @return calc((#{$pxval} / #{$base}) * 1em); } // ie calc trick

	@return $remval;
}


// retina
@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (   min--moz-device-pixel-ratio: 2),
		only screen and (     -o-min-device-pixel-ratio: 2/1),
		only screen and (        min-device-pixel-ratio: 2),
		only screen and (                min-resolution: 192dpi),
		only screen and (                min-resolution: 2dppx)
		{@content}
}

// PLACEHOLDER COLOR
@mixin pl {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// HOVER
@mixin hover { &:hover, &:active { @content } }
@mixin focus { &:focus { @content } }

// SMOOTH
@mixin smooth($int: .3s, $prop: all) { transition: $prop $int; }

// webp
@mixin webp($path) {
	.no-js &, .no-webp & {
		background-image: url($path);
	}
	.webp & {
		$pathLength: str-length($path) - 4;
		$path: str-slice($path, 1, $pathLength);
		background-image: url($path + '.webp');
	}
}
